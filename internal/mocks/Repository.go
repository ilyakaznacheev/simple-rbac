// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/ilyakaznacheev/simple-rbac/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateRoleBinding provides a mock function with given fields: ctx, binding
func (_m *Repository) UpsertRoleBinding(ctx context.Context, binding model.RoleBinding) error {
	ret := _m.Called(ctx, binding)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RoleBinding) error); ok {
		r0 = rf(ctx, binding)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRole provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteRole(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRoleBinding provides a mock function with given fields: ctx, userID, roleID
func (_m *Repository) DeleteRoleBinding(ctx context.Context, userID string, roleID string) error {
	ret := _m.Called(ctx, userID, roleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRole provides a mock function with given fields: ctx, id
func (_m *Repository) GetRole(ctx context.Context, id string) (model.Role, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Role
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Role); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Role)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPermissionsByOrg provides a mock function with given fields: ctx, userID, organizationID
func (_m *Repository) GetUserPermissionsByOrg(ctx context.Context, userID string, organizationID string) ([]model.Permission, error) {
	ret := _m.Called(ctx, userID, organizationID)

	var r0 []model.Permission
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []model.Permission); ok {
		r0 = rf(ctx, userID, organizationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Permission)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, organizationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertRole provides a mock function with given fields: ctx, role
func (_m *Repository) UpsertRole(ctx context.Context, role model.Role) error {
	ret := _m.Called(ctx, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Role) error); ok {
		r0 = rf(ctx, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
